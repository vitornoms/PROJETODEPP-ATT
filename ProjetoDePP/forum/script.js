if (localStorage.getItem("token") == null) { // Verifica se o token de autentica√ß√£o est√° ausente no localStorage.
    alert("Voc√™ precisa estar logado para acessar essa p√°gina"); // Exibe um alerta informando ao usu√°rio que ele precisa estar logado.
    window.location.href = "../signin.html"; // Redireciona o usu√°rio para a p√°gina de login (signin.html).
}

let button = document.getElementById("handleSubmit"); // Obt√©m o elemento com o ID "handleSubmit" e o armazena na vari√°vel 'button'.

button.onclick = async function() { // Adiciona um evento de clique ao bot√£o, definido como uma fun√ß√£o ass√≠ncrona.
    let title = document.getElementById("title").value; // Obt√©m o valor do elemento com o ID "title" e o armazena na vari√°vel 'title'.
    // let description = document.getElementById("description").value; // (Comentado) Obt√©m o valor do elemento com o ID "description".
    let data = {title}; // Cria um objeto contendo o t√≠tulo como uma propriedade.

    const response = await fetch('http://localhost:3000/api/store/task', { // Faz uma requisi√ß√£o POST ao servidor.
        method: "POST", // Define o m√©todo HTTP como POST.
        headers: {"Content-type": "application/json;charset=UTF-8"}, // Define os cabe√ßalhos da requisi√ß√£o, especificando que o corpo √© JSON.
        body: JSON.stringify(data) // Converte o objeto 'data' para JSON e o envia como corpo da requisi√ß√£o.
    });

    let content = await response.json(); // Espera a resposta do servidor e a converte para um objeto JavaScript.

    if(content.success) { // Verifica se a resposta indica sucesso.
        alert("Sucesso"); // Exibe um alerta de sucesso.
    } else { 
        alert('N√£o'); // Exibe um alerta indicando falha.
    }
}

document.addEventListener('DOMContentLoaded', function() { // Adiciona um evento que executa a fun√ß√£o quando o DOM √© carregado.
    var postagensSalvas = JSON.parse(localStorage.getItem('postagensSalvas')) || []; // Recupera as postagens salvas do localStorage, ou um array vazio se n√£o houver.
    var messagesDiv = document.getElementById('messages'); // Obt√©m o elemento com o ID 'messages' para exibir as postagens.

    // Fun√ß√£o para renderizar postagens
    function renderPostagens() {
        messagesDiv.innerHTML = ''; // Limpa o conte√∫do anterior do elemento 'messagesDiv'.

        // Mostrar ou esconder o cont√™iner com base na presen√ßa de mensagens
        if (postagensSalvas.length > 0) { // Se houver postagens salvas...
            messagesDiv.style.display = 'block'; // ...exibe o cont√™iner de mensagens.
        } else {
            messagesDiv.style.display = 'none'; // ...caso contr√°rio, oculta o cont√™iner de mensagens.
        }

        postagensSalvas.forEach(function(postagem, index) { // Itera sobre cada postagem salva.
            var messageItem = document.createElement('div'); // Cria um novo elemento <div> para cada postagem.
            messageItem.classList.add('message-item'); // Adiciona uma classe ao elemento <div>.

            var p = document.createElement('p'); // Cria um novo elemento <p> para o texto da postagem.
            p.textContent = postagem; // Define o texto da postagem.

            // Bot√£o de editar
            var editButton = document.createElement('button'); // Cria um bot√£o para editar a postagem.
            editButton.classList.add('edit-button'); // Adiciona uma classe ao bot√£o de editar.
            editButton.textContent = '‚úé'; // Define o texto do bot√£o como um √≠cone de edi√ß√£o.
            editButton.addEventListener('click', function() { // Adiciona um evento de clique ao bot√£o de editar.
                var newText = prompt('Editar coment√°rio:', postagem); // Exibe um prompt para editar o texto da postagem.
                if (newText !== null && newText.trim() !== '') { // Se o texto editado n√£o for nulo e n√£o for vazio...
                    postagensSalvas[index] = newText; // Atualiza o texto da postagem no array.
                    localStorage.setItem('postagensSalvas', JSON.stringify(postagensSalvas)); // Atualiza o localStorage com as postagens editadas.
                    renderPostagens(); // Re-renderiza as postagens para refletir a edi√ß√£o.
                }
            });

            // Bot√£o de deletar
            var deleteButton = document.createElement('button'); // Cria um bot√£o para deletar a postagem.
            deleteButton.classList.add('delete-button'); // Adiciona uma classe ao bot√£o de deletar.
            deleteButton.textContent = 'üóëÔ∏è'; // Define o texto do bot√£o como um √≠cone de lixeira.
            deleteButton.addEventListener('click', function() { // Adiciona um evento de clique ao bot√£o de deletar.
                postagensSalvas.splice(index, 1); // Remove a postagem do array.
                localStorage.setItem('postagensSalvas', JSON.stringify(postagensSalvas)); // Atualiza o localStorage com a postagem removida.
                renderPostagens(); // Re-renderiza as postagens para refletir a remo√ß√£o.
            });

            // Adicionar os bot√µes e o texto √† mensagem
            messageItem.appendChild(p); // Adiciona o texto da postagem ao elemento <div>.
            messageItem.appendChild(editButton); // Adiciona o bot√£o de editar ao elemento <div>.
            messageItem.appendChild(deleteButton); // Adiciona o bot√£o de deletar ao elemento <div>.
            messagesDiv.appendChild(messageItem); // Adiciona o elemento <div> ao cont√™iner de mensagens.
        });
    }

    // Renderizar postagens salvas ao carregar a p√°gina
    renderPostagens(); // Chama a fun√ß√£o para renderizar as postagens salvas quando a p√°gina √© carregada.

    // Adicionar evento de clique ao bot√£o de comentar
    document.getElementById('handleSubmit').addEventListener('click', function() { // Adiciona um evento de clique ao bot√£o de "Comentar".
        var texto = document.getElementById('title').value; // Obt√©m o valor do campo de entrada com o ID 'title'.
        if (texto) { // Se o texto n√£o estiver vazio...
            postagensSalvas.push(texto); // Adiciona o texto ao array de postagens salvas.
            localStorage.setItem('postagensSalvas', JSON.stringify(postagensSalvas)); // Atualiza o localStorage com a nova postagem.
            renderPostagens(); // Re-renderiza as postagens para incluir a nova postagem.
            document.getElementById('title').value = ''; // Limpa o campo de entrada ap√≥s a postagem.
        }
    });

    // Adicionar evento de clique ao bot√£o de cancelar (limpar postagens)
    document.getElementById('handleClear').addEventListener('click', function() { // Adiciona um evento de clique ao bot√£o de "Cancelar".
        localStorage.removeItem('postagensSalvas'); // Remove todas as postagens salvas do localStorage.
        postagensSalvas = []; // Limpa o array de postagens salvas.
        renderPostagens(); // Re-renderiza as postagens para refletir a limpeza.
    });
});

